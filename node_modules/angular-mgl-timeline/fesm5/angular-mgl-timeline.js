import { Component, Input, HostBinding, ElementRef, EventEmitter, Renderer, ChangeDetectorRef, Output, ContentChild, ContentChildren, HostListener, NgModule } from '@angular/core';
import { __assign } from 'tslib';
import { AnimationBuilder, style, animate } from '@angular/animations';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var MglTimelineEntryHeaderComponent = /** @class */ (function () {
    function MglTimelineEntryHeaderComponent() {
    }
    MglTimelineEntryHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mgl-timeline-entry-header',
                    template: "<ng-content></ng-content>",
                    styles: [":host{position:relative;display:block;overflow:hidden;padding:15px;text-align:center}"]
                }] }
    ];
    return MglTimelineEntryHeaderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var MglTimelineEntryDotComponent = /** @class */ (function () {
    function MglTimelineEntryDotComponent(animationBuilder, elementRef, renderer, changeDetectorRef) {
        this.animationBuilder = animationBuilder;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.changeDetectorRef = changeDetectorRef;
        this._expanded = false;
        this._alternate = false;
        this._mobile = false;
        this._size = 50;
        this.animationDone = new EventEmitter();
        this.clazz = 'primary';
    }
    Object.defineProperty(MglTimelineEntryDotComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        set: /**
         * @param {?} size
         * @return {?}
         */
        function (size) {
            this._size = size;
            this.setStyle();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MglTimelineEntryDotComponent.prototype, "alternate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._alternate;
        },
        set: /**
         * @param {?} alternate
         * @return {?}
         */
        function (alternate) {
            this._alternate = alternate;
            this.setStyle();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MglTimelineEntryDotComponent.prototype, "mobile", {
        get: /**
         * @return {?}
         */
        function () {
            return this._mobile;
        },
        set: /**
         * @param {?} mobile
         * @return {?}
         */
        function (mobile) {
            this._mobile = mobile;
            this.setStyle();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MglTimelineEntryDotComponent.prototype, "expanded", {
        get: /**
         * @return {?}
         */
        function () {
            return this._expanded;
        },
        set: /**
         * @param {?} expanded
         * @return {?}
         */
        function (expanded) {
            /** @type {?} */
            var animate$$1 = this._expanded !== expanded;
            this._expanded = expanded;
            animate$$1 ? this.animate() : this.setStyle();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initialStyle = window.getComputedStyle(this.elementRef.nativeElement);
        this.setStyle();
        this.changeDetectorRef.detectChanges();
    };
    /**
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.getCollapsedStyle = /**
     * @return {?}
     */
    function () {
        return {
            top: '50%',
            left: (this.alternate || this.mobile) ? '-5px' : 'calc(100% + 5px)',
            width: this.size + 'px',
            height: this.size + 'px',
            opacity: 1,
            transform: 'translateY(-50%) translateX(-50%)',
            boxShadow: this.initialStyle && this.initialStyle.boxShadow,
            borderRadius: '100px'
        };
    };
    /**
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.getTransitionStyle = /**
     * @return {?}
     */
    function () {
        return __assign({}, this.getCollapsedStyle(), { left: '50%', opacity: 0.5, boxShadow: 'none' });
    };
    /**
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.getExpandedStyle = /**
     * @return {?}
     */
    function () {
        return __assign({}, this.getTransitionStyle(), { left: '0', transform: 'translateX(0) translateY(-50%)', width: '100%', height: '100%', opacity: 1, borderRadius: 0 });
    };
    /**
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.animate = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.destroyAnimation();
        if (this.expanded) {
            this.animation = this.animationBuilder
                .build([
                style(this.getCollapsedStyle()),
                animate('200ms ease', style(this.getTransitionStyle())),
                animate('200ms ease', style(this.getExpandedStyle())),
            ])
                .create(this.elementRef.nativeElement);
            this.animation.onDone(function () { return _this.animationDone.emit({ toState: 'expanded' }); });
            this.animation.play();
        }
        else {
            this.animationBuilder;
            this.animation = this.animationBuilder
                .build([
                style(this.getExpandedStyle()),
                animate('100ms ease', style(this.getTransitionStyle())),
                animate('100ms ease', style(this.getCollapsedStyle())),
            ])
                .create(this.elementRef.nativeElement);
            this.animation.onDone(function () { return _this.animationDone.emit({ toState: 'collapsed' }); });
            this.animation.play();
        }
    };
    /**
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.setStyle = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.destroyAnimation();
        /** @type {?} */
        var baseStyle = this.expanded ? this.getExpandedStyle() : this.getCollapsedStyle();
        Object.keys(baseStyle).forEach(function (property) {
            _this.renderer.setElementStyle(_this.elementRef.nativeElement, property, baseStyle[property]);
        });
    };
    /**
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.destroyAnimation = /**
     * @return {?}
     */
    function () {
        if (this.animation) {
            this.animation.destroy();
            delete this.animation;
        }
    };
    MglTimelineEntryDotComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mgl-timeline-entry-dot',
                    template: "<ng-content></ng-content>\n",
                    styles: [":host{display:block;position:absolute}"]
                }] }
    ];
    /** @nocollapse */
    MglTimelineEntryDotComponent.ctorParameters = function () { return [
        { type: AnimationBuilder },
        { type: ElementRef },
        { type: Renderer },
        { type: ChangeDetectorRef }
    ]; };
    MglTimelineEntryDotComponent.propDecorators = {
        clazz: [{ type: Input, args: ['class',] }, { type: HostBinding, args: ['class',] }],
        size: [{ type: Input }]
    };
    return MglTimelineEntryDotComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var MglTimelineEntryContentComponent = /** @class */ (function () {
    function MglTimelineEntryContentComponent(elementRef, animationBuilder, renderer) {
        this.elementRef = elementRef;
        this.animationBuilder = animationBuilder;
        this.renderer = renderer;
        this.animationDone = new EventEmitter();
        this._expanded = false;
    }
    Object.defineProperty(MglTimelineEntryContentComponent.prototype, "expanded", {
        get: /**
         * @return {?}
         */
        function () {
            return this._expanded;
        },
        set: /**
         * @param {?} expanded
         * @return {?}
         */
        function (expanded) {
            this.contentHeight = this.elementRef.nativeElement.scrollHeight;
            /** @type {?} */
            var animate$$1 = this._expanded !== expanded;
            this._expanded = expanded;
            animate$$1 ? this.animate() : this.setStyle;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MglTimelineEntryContentComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.contentHeight = this.elementRef.nativeElement.scrollHeight;
        this.setStyle();
    };
    /**
     * @return {?}
     */
    MglTimelineEntryContentComponent.prototype.getCollapsedStyle = /**
     * @return {?}
     */
    function () {
        return {
            height: 0
        };
    };
    /**
     * @return {?}
     */
    MglTimelineEntryContentComponent.prototype.getExpandedStyle = /**
     * @return {?}
     */
    function () {
        return {
            height: this.contentHeight + 'px'
        };
    };
    /**
     * @return {?}
     */
    MglTimelineEntryContentComponent.prototype.animate = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.expanded) {
            /** @type {?} */
            var animation = this.animationBuilder
                .build([
                style(this.getCollapsedStyle()),
                animate('100ms ease', style(this.getExpandedStyle())),
            ])
                .create(this.elementRef.nativeElement);
            animation.onDone(function () { return _this.animationDone.emit({ toState: 'expanded' }); });
            animation.play();
        }
        else {
            this.animationBuilder;
            /** @type {?} */
            var animation = this.animationBuilder
                .build([
                style(this.getExpandedStyle()),
                animate('200ms ease', style(this.getCollapsedStyle())),
            ])
                .create(this.elementRef.nativeElement);
            animation.onDone(function () { return _this.animationDone.emit({ toState: 'collapsed' }); });
            animation.play();
        }
    };
    /**
     * @return {?}
     */
    MglTimelineEntryContentComponent.prototype.setStyle = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var baseStyle = this.expanded ? this.getExpandedStyle() : this.getCollapsedStyle();
        Object.keys(baseStyle).forEach(function (property) {
            _this.renderer.setElementStyle(_this.elementRef.nativeElement, property, baseStyle[property]);
        });
    };
    MglTimelineEntryContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mgl-timeline-entry-content',
                    template: "<div><ng-content></ng-content></div>",
                    styles: [":host{position:relative;display:block;overflow:hidden}:host>div{padding:10px}"]
                }] }
    ];
    /** @nocollapse */
    MglTimelineEntryContentComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: AnimationBuilder },
        { type: Renderer }
    ]; };
    return MglTimelineEntryContentComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var MglTimelineEntrySideComponent = /** @class */ (function () {
    function MglTimelineEntrySideComponent(elementRef) {
        this.elementRef = elementRef;
    }
    Object.defineProperty(MglTimelineEntrySideComponent.prototype, "alternate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.elementRef.nativeElement.classList.toggle('alternate', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MglTimelineEntrySideComponent.prototype, "mobile", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.elementRef.nativeElement.classList.toggle('mobile', value);
        },
        enumerable: true,
        configurable: true
    });
    MglTimelineEntrySideComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mgl-timeline-entry-side',
                    template: "<ng-content></ng-content>",
                    styles: [":host{position:absolute;top:0;left:100%;width:100%;text-align:center}:host.alternate{left:-100%}:host.mobile{display:none}"]
                }] }
    ];
    /** @nocollapse */
    MglTimelineEntrySideComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return MglTimelineEntrySideComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var MglTimelineEntryComponent = /** @class */ (function () {
    function MglTimelineEntryComponent(elementRef) {
        this.elementRef = elementRef;
        this.subscriptions = [];
        this.focusOnOpen = false;
        this._mobile = false;
        this.changed = new EventEmitter();
        this.animationDone = new EventEmitter();
    }
    Object.defineProperty(MglTimelineEntryComponent.prototype, "expanded", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dot ? (this.dot.expanded && this.content.expanded) : this.content.expanded;
        },
        set: /**
         * @param {?} expanded
         * @return {?}
         */
        function (expanded) {
            if (this.dot && expanded) {
                this.dot.expanded = expanded;
            }
            else {
                this.content.expanded = expanded;
            }
            this.changed.emit(expanded);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MglTimelineEntryComponent.prototype, "mobile", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.elementRef.nativeElement.classList.toggle('mobile', value);
            if (this.dot) {
                this.dot.mobile = value;
            }
            if (this.side) {
                this.side.mobile = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MglTimelineEntryComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.dot) {
            this.subscriptions.push(this.dot.animationDone.subscribe(function (event) {
                if (event.toState === 'expanded') {
                    _this.content.expanded = true;
                }
                else {
                    _this.animationDone.emit(event);
                }
            }));
        }
        if (this.content) {
            this.subscriptions.push(this.content.animationDone.subscribe(function (event) {
                if (_this.dot && event.toState === 'collapsed') {
                    _this.dot.expanded = false;
                }
                else {
                    if (_this.focusOnOpen) {
                        _this.elementRef.nativeElement.scrollIntoView({ behavior: 'smooth' });
                    }
                    _this.animationDone.emit(event);
                }
            }));
        }
    };
    Object.defineProperty(MglTimelineEntryComponent.prototype, "alternate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.elementRef.nativeElement.classList.toggle('alternate', value);
            if (this.dot) {
                this.dot.alternate = value;
            }
            if (this.side) {
                this.side.alternate = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MglTimelineEntryComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
    };
    /**
     * @return {?}
     */
    MglTimelineEntryComponent.prototype.collapse = /**
     * @return {?}
     */
    function () {
        this.expanded = false;
    };
    /**
     * @return {?}
     */
    MglTimelineEntryComponent.prototype.expand = /**
     * @return {?}
     */
    function () {
        this.expanded = true;
    };
    /**
     * @return {?}
     */
    MglTimelineEntryComponent.prototype.toggle = /**
     * @return {?}
     */
    function () {
        this.expanded = !this.expanded;
    };
    MglTimelineEntryComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mgl-timeline-entry',
                    template: "<ng-content select=\"mgl-timeline-entry-side\"></ng-content>\n<div class=\"mgl-timeline-entry-card\">\n  <div class=\"mgl-timeline-entry-card-header\" (click)=\"toggle()\">\n    <ng-content select=\"mgl-timeline-entry-dot\"></ng-content>\n    <ng-content select=\"mgl-timeline-entry-header\"></ng-content>\n  </div>\n  <ng-content select=\"mgl-timeline-entry-content\"></ng-content>\n</div>",
                    styles: [":host{display:block;position:relative;margin-bottom:50px;width:calc(50% - 5px)}:host.alternate{margin-left:calc(50% + 5px)}:host.mobile{width:calc(100% - 30px);margin-left:30px}:host .mgl-timeline-entry-card{background-color:#f0f0f0}:host .mgl-timeline-entry-card .mgl-timeline-entry-card-header{position:relative;background-color:#e6e6e6}"]
                }] }
    ];
    /** @nocollapse */
    MglTimelineEntryComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MglTimelineEntryComponent.propDecorators = {
        expanded: [{ type: HostBinding, args: ['class.expanded',] }],
        changed: [{ type: Output, args: ['expand',] }],
        animationDone: [{ type: Output }],
        content: [{ type: ContentChild, args: [MglTimelineEntryContentComponent,] }],
        header: [{ type: ContentChild, args: [MglTimelineEntryHeaderComponent,] }],
        dot: [{ type: ContentChild, args: [MglTimelineEntryDotComponent,] }],
        side: [{ type: ContentChild, args: [MglTimelineEntrySideComponent,] }]
    };
    return MglTimelineEntryComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var MglTimelineComponent = /** @class */ (function () {
    function MglTimelineComponent(elementRef, changeDetectorRef) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.toggle = true;
        this.alternate = true;
        this._focusOnOpen = false;
        this.subscriptions = [];
    }
    Object.defineProperty(MglTimelineComponent.prototype, "mobile", {
        get: /**
         * @return {?}
         */
        function () {
            return this.elementRef.nativeElement.classList.contains('mobile');
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.content && this.content.forEach(function (entry) { return entry.mobile = value; });
            this.elementRef.nativeElement.classList.toggle('mobile', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MglTimelineComponent.prototype, "focusOnOpen", {
        get: /**
         * @return {?}
         */
        function () {
            return this._focusOnOpen;
        },
        set: /**
         * @param {?} focusOnOpen
         * @return {?}
         */
        function (focusOnOpen) {
            this.content && this.content.forEach(function (entry) { return entry.focusOnOpen = focusOnOpen; });
            this._focusOnOpen = focusOnOpen;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} simpleChanges
     * @return {?}
     */
    MglTimelineComponent.prototype.ngOnChanges = /**
     * @param {?} simpleChanges
     * @return {?}
     */
    function (simpleChanges) {
        this.updateContent();
    };
    /**
     * @return {?}
     */
    MglTimelineComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
    };
    /**
     * @return {?}
     */
    MglTimelineComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.mobile = this.elementRef.nativeElement.clientWidth < 640;
        setTimeout(function () { return _this.updateContent(); });
        this.content.changes.subscribe(function (changes) {
            _this.updateContent();
        });
    };
    /**
     * @return {?}
     */
    MglTimelineComponent.prototype.updateContent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngOnDestroy();
        if (this.content) {
            this.content.forEach(function (entry, index) {
                if (_this.toggle) {
                    _this.subscriptions.push(entry.changed.subscribe(function (state) {
                        if (state === true) {
                            _this.content.filter(function (e) { return e !== entry; }).forEach(function (e) { return e.collapse(); });
                        }
                    }));
                }
                entry.alternate = _this.alternate ? index % 2 !== 0 : false;
                entry.mobile = _this.mobile;
                entry.focusOnOpen = _this.focusOnOpen;
            });
        }
    };
    /**
     * @param {?} ev
     * @return {?}
     */
    MglTimelineComponent.prototype.onResize = /**
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        this.mobile = this.elementRef.nativeElement.clientWidth < 640;
    };
    MglTimelineComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mgl-timeline',
                    template: "<div class=\"mgl-timeline-line\"></div>\n<ng-content></ng-content>",
                    styles: [":host{position:relative;display:block;padding:50px 0}:host .mgl-timeline-line{position:absolute;top:0;height:100%;background-color:#a0a0a0;left:50%;width:10px;-webkit-transform:translateX(-50%);transform:translateX(-50%)}:host.mobile .mgl-timeline-line{left:20px;-webkit-transform:none;transform:none}"]
                }] }
    ];
    /** @nocollapse */
    MglTimelineComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    MglTimelineComponent.propDecorators = {
        toggle: [{ type: Input }],
        alternate: [{ type: Input }],
        focusOnOpen: [{ type: Input }],
        content: [{ type: ContentChildren, args: [MglTimelineEntryComponent,] }],
        onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
    };
    return MglTimelineComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var MglTimelineModule = /** @class */ (function () {
    function MglTimelineModule() {
    }
    MglTimelineModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        MglTimelineComponent,
                        MglTimelineEntryComponent,
                        MglTimelineEntryHeaderComponent,
                        MglTimelineEntrySideComponent,
                        MglTimelineEntryContentComponent,
                        MglTimelineEntryDotComponent
                    ],
                    exports: [
                        MglTimelineComponent,
                        MglTimelineEntryComponent,
                        MglTimelineEntryHeaderComponent,
                        MglTimelineEntrySideComponent,
                        MglTimelineEntryContentComponent,
                        MglTimelineEntryDotComponent
                    ]
                },] }
    ];
    return MglTimelineModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { MglTimelineModule, MglTimelineEntryContentComponent as ɵc, MglTimelineEntryDotComponent as ɵe, MglTimelineEntryHeaderComponent as ɵd, MglTimelineEntrySideComponent as ɵf, MglTimelineEntryComponent as ɵb, MglTimelineComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,